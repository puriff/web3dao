import Head from 'next/head'
import Image from 'next/image'
import { Inter } from '@next/font/google'
import styles from '../styles/Home.module.css'
import { providers, Contract, ethers, utils } from "ethers";
import { useEffect, useRef, useState } from "react";
import { MARKETPLACE_CONTRACT_ADDRESS, MARKETPLACE_ABI } from "../constants";
import { DAO_CONTRACT_ADDRESS, DAO_ABI } from "../constants";
import { NFT_COLLECTION_CONTRACT_ADDRESS, NFT_ABI } from "../constants";
import Web3Modal from "web3modal"

const inter = Inter({ subsets: ['latin'] })

export default function Home() {

  const [walletConnected, setWalletConnected] = useState(false)
  const [DAOBalance, setDAOBalance] = useState(0)
  const [nftBalance, setNFTBalance] = useState(0)
  const [numberProposals, setNumberProposals] = useState(0)

  const web3ModalRef = useRef()

  const getProviderOrSigner = async (needSigner = false) => {
    const provider = await web3ModalRef.current.connect();
    const web3Provider = new providers.Web3Provider(provider);

    const { chainId } = await web3Provider.getNetwork();
    if (chainId !== 5) {
      window.alert("Change the network to Goerli");
      throw new Error("Change network to Goerli");
    }

    if (needSigner) {
      const signer = web3Provider.getSigner();
      return signer;
    }
    return web3Provider;
  }

  const connectWallet = async () => {
    try {
      await getProviderOrSigner();
      setWalletConnected(true);
    } catch (err) {
      console.error(err);
    }
  }

  const getDAOETHBalance = async() => {
    try {
      let provider = await getProviderOrSigner()
      let balance = await provider.getBalance(DAO_CONTRACT_ADDRESS)
      let readableBalance = toReadableValue(balance)
      setDAOBalance(readableBalance)
    } catch(error) {
      console.log(error)
    }
  }

  const getCryptoDevNFTsBalance = async() => {
    try {
      let signer = await getProviderOrSigner(true)
      let address = await signer.getAddress()
      let cryptoDevsNFTsContract = new ethers.Contract(NFT_COLLECTION_CONTRACT_ADDRESS, NFT_ABI, signer)
      let nftBalance = await cryptoDevsNFTsContract.balanceOf(address)
      setNFTBalance(Number(nftBalance))
    } catch(error) {
      console.log(error)
    }
  }

  const getNumberOfProposals = async() => {
    try {
      let provider = await getProviderOrSigner()
      let daoContract = new ethers.Contract(DAO_CONTRACT_ADDRESS, DAO_ABI, provider)
      let numberProposals = await daoContract.numberProposals()
      setNumberProposals(Number(numberProposals))
    } catch(error) {
      console.log(error)
    }
  }

  const createProposal = async() => {
    try {
      
    } catch(error) {
      console.log(error)
    }
  }

  const toReadableValue = (bignumber) => {
    return Number(bignumber / Math.pow(10,18))
  }

  useEffect(() => {
    if(!walletConnected)
      web3ModalRef.current = new Web3Modal({
        network: "goerli",
        providerOptions: {},
        disableInjectedProvider: false,
      });
      connectWallet();
      getDAOETHBalance()
      getCryptoDevNFTsBalance()
      getNumberOfProposals()
  }, [walletConnected])

  return (
    <div>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className={styles.main}>
          <div>
            <h1 className={styles.title}> Welcome to the CryptoDev DAO</h1>
            <div className={styles.description}>Here you can create and vote on proposals!</div>
            <div className={styles.description}>DAO treasury : {DAOBalance} ETH</div>
            <div className={styles.description}>You have {nftBalance} CryptoDev NFTs </div>
            <div className={styles.description}>{numberProposals} proposals have been created so far!</div>
            <div className={styles.buttonDiv}>
              <button className={styles.button}>Create proposal</button>
              <button className={styles.button}>View proposals</button>
            </div>
            
          </div>
          <img className={styles.image} src="/read.png" ></img>

      </div>

      <footer className={styles.footer}> Made with &#10084; by Purif </footer>
    </div>
  )
}
